homeassistant:
  customize:
    package.node_anchors:
      customize: &customize
        Package: 'Consumi'
        Version: '0.1.0'
        Author: 'Domenico Ceccarelli'
        icon: 'mdi:counter'
        entity_picture: https://avatars1.githubusercontent.com/u/37450907?s=400&u=c6397fc94ead7e4c469bfd3c6fa6c50c599f1ea8&v=4
        reference: 'riddik14 - github telegram @riddik14'
      expose: &expose
        <<: *customize
        haaska_hidden: false
        homebridge_hidden: false
        
        
    sensor.energia_kwh:
      <<: *customize
    input_number.costo_f1:
        <<: *customize
    input_datetime.f1_ora_inizio:
        <<: *customize
    sensor.consumo_giornaliero_f1:
        <<: *customize
    sensor.consumo_giornaliero_f2:
        <<: *customize
    sensor.consumo_giornaliero_f3:
        <<: *customize
    sensor.consumo_mensile_f1:
        <<: *customize
    sensor.consumo_mensile_f2:
        <<: *customize
    sensor.consumo_mensile_f3:
        <<: *customize
    sensor.consumo_annuale_f1:
        <<: *customize
    sensor.consumo_annuale_f2:
        <<: *customize
    sensor.consumo_annuale_f3:
        <<: *customize
        
        
  customize_glob:
    sensor.energia_kwh:
      <<: *customize
    input_number.costo_f1:
        <<: *customize
    input_number.f1_ora_inizio:
        <<: *customize
    sensor.consumo_giornaliero_f1:
        <<: *customize
    sensor.consumo_giornaliero_f2:
        <<: *customize
    sensor.consumo_giornaliero_f3:
        <<: *customize
    sensor.consumo_mensile_f1:
        <<: *customize
    sensor.consumo_mensile_f2:
        <<: *customize
    sensor.consumo_mensile_f3:
        <<: *customize
    sensor.consumo_annuale_f1:
        <<: *customize
    sensor.consumo_annuale_f2:
        <<: *customize
    sensor.consumo_annuale_f3:
        <<: *customize






downloader:
  download_dir: packages    
utility_meter:
  consumo_giornaliero:
    source: !secret Sensore
    cycle: daily 
    tariffs:
      - f1
      - f2
      - f3
  consumo_mensile:
    source: !secret Sensore
    cycle: monthly
    tariffs:
      - f1
      - f2
      - f3
  consumo_annuale:
    source: !secret Sensore
    cycle: yearly
    tariffs:
      - f1
      - f2
      - f3
sensor:
   - platform: integration
     source: !secret Sensore_w_to_kwh 
     name: energia_kwh
     unit_prefix: k
     round: 2

   - platform: rest
     resource: https://raw.githubusercontent.com/riddik14/hassio-package-consumi/master/versione.json
     name: Versione pk consumi
     value_template: '{{ value_json.versione }}'

   - platform: rest
     resource: https://raw.githubusercontent.com/riddik14/hassio-package-consumi/master/versione.json
     name: tipo aggiornamento pk consumi
     value_template: '{{ value_json.cosa_aggiornare }}'



   - platform: template
     sensors:
      costo_consumo_oggi_f1:
        friendly_name_template: "Costo Consumo Oggi fascia 1"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_giornaliero_f1.state | float) * (states.input_number.costo_f1.state| float)) | round(2) }}"
        unit_of_measurement: '€'
      costo_consumo_oggi_f2:
        friendly_name_template: "Costo Consumo Oggi fascia 2"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_giornaliero_f2.state | float) * (states.input_number.costo_f2.state| float)) | round(2) }}"
        unit_of_measurement: '€'
      costo_consumo_oggi_f3:
        friendly_name_template: "Costo Consumo Oggi fascia 3"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_giornaliero_f3.state | float) * (states.input_number.costo_f3.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      consumo_totale_oggi:
        friendly_name_template: " Consumo Oggi "
        icon_template: mdi:counter
        value_template: "{{((states.sensor.consumo_giornaliero_f1.state | float) + (states.sensor.consumo_giornaliero_f2.state | float) + (states.sensor.consumo_giornaliero_f3.state | float)) | round(3) }}"
        unit_of_measurement: 'KWh'

      costo_consumo_oggi_totale:
        friendly_name_template: "Costo Consumo Oggi"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.costo_consumo_oggi_f1.state | float) + (states.sensor.costo_consumo_oggi_f2.state| float) + (states.sensor.costo_consumo_oggi_f3.state| float)) | round(2) }}"
        unit_of_measurement: '€'
      costo_consumo_mensile_f1:
        friendly_name_template: "Costo Consumo mensile fascia 1"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_mensile_f1.state | float) * (states.input_number.costo_f1.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      costo_consumo_mensile_f2:
        friendly_name_template: "Costo Consumo mensile fascia 2"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_mensile_f2.state | float) * (states.input_number.costo_f2.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      costo_consumo_mensile_f3:
        friendly_name_template: "Costo Consumo mensile fascia 3"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_mensile_f3.state | float) * (states.input_number.costo_f3.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      consumo_totale_mensile:
        friendly_name_template: "Consumo mensile"
        icon_template: mdi:counter
        value_template: "{{((states.sensor.consumo_mensile_f1.state | float) + (states.sensor.consumo_mensile_f2.state | float) + (states.sensor.consumo_mensile_f3.state | float)) | round(3) }}"
        unit_of_measurement: 'KWh'

      costo_consumo_mensile_totale:
        friendly_name_template: "Costo Consumo mensile"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.costo_consumo_mensile_f1.state | float) + (states.sensor.costo_consumo_mensile_f2.state| float) + (states.sensor.costo_consumo_mensile_f3.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      costo_consumo_annuale_f1:
        friendly_name_template: "Costo Consumo annuale fascia 1"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_annuale_f1.state | float) * (states.input_number.costo_f1.state| float)) | round(2) }}"
        unit_of_measurement: '€'


      costo_consumo_annuale_f2:
        friendly_name_template: "Costo Consumo annuale fascia 2"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_annuale_f2.state | float) * (states.input_number.costo_f2.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      costo_consumo_annuale_f3:
        friendly_name_template: "Costo Consumo annuale fascia 3"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_annuale_f3.state | float) * (states.input_number.costo_f3.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      consumo_totale_annuale:
        friendly_name_template: "Consumo annuale"
        icon_template: mdi:counter
        value_template: "{{((states.sensor.consumo_annuale_f1.state | float) + (states.sensor.consumo_annuale_f2.state | float) + (states.sensor.consumo_annuale_f3.state | float)) | round(3) }}"
        unit_of_measurement: 'KWh'

      # Costi bolletta #
      costo_consumo_annuale_totale:
        friendly_name_template: "Costo Consumo annuale"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.costo_consumo_annuale_f1.state | float) + (states.sensor.costo_consumo_annuale_f2.state| float) + (states.sensor.costo_consumo_annuale_f3.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      bolletta_tot_anno:
        friendly_name_template: "Stima Costo Annuale"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set energiaConsumo = states('sensor.costo_consumo_annuale_totale') | float %}
          {% set energiaFissa = (states('input_number.materia_energia_quota_fissa_annua') | float) | round(2) %}
          {% set energia = energiaConsumo + energiaFissa %}
           
          {% set trasportoConsumo = ((states('sensor.consumo_totale_annuale') | float) * (states('input_number.trasporto_quota_energia') | float)) |round (2) %}
          {% set trasportoFissa = (states('input_number.trasporto_quota_fissa_annua') | float) | round(2) %}
          {% set trasportoPotenza =  ((states('input_number.trasporto_quota_potenza_annua') | float) * (states('input_number.kw_contatore') | float)) | round(2) %}
          {% set trasporto = trasportoConsumo + trasportoFissa + trasportoPotenza %}
          
          {% set oneri = ((states('sensor.consumo_totale_annuale') | float) * (states('input_number.oneri_di_sistema_quota_energia') | float)) |round (2) %}

          {%set accise = ((states('sensor.consumo_totale_annuale') | float) * (states('input_number.accise') | float)) %}
          {%set iva = ((energia + trasporto + oneri + accise) * (states('input_number.iva') | float) / 100) %}

          {{ (energia + trasporto + oneri + accise + iva ) | round(2) }}
        unit_of_measurement: '€'

      bolletta_tot:
        friendly_name_template: "Bolletta Stimata"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set energiaConsumo = states('sensor.costo_consumo_mensile_totale') | float %}
          {% set energiaFissa = ((states('input_number.materia_energia_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set energia = energiaConsumo + energiaFissa %}
          {% set trasportoConsumo = ((states('sensor.consumo_totale_mensile') | float) * (states('input_number.trasporto_quota_energia') | float)) |round (2) %}
          {% set trasportoFissa = ((states('input_number.trasporto_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set trasportoPotenza =  (((states('input_number.trasporto_quota_potenza_annua') | float) * (states('input_number.kw_contatore') | float)) / 12) | round(2) %}
          {% set trasporto = trasportoConsumo + trasportoFissa + trasportoPotenza %}
          {% set oneri = ((states('sensor.consumo_totale_mensile') | float) * (states('input_number.oneri_di_sistema_quota_energia') | float)) |round (2) %}
          {% set accise = ((states('sensor.consumo_totale_mensile') | float) * (states('input_number.accise') | float)) %}
          {% set iva = ((energia + trasporto + oneri + accise) * (states('input_number.iva') | float) / 100) %}
          {% if is_state('input_select.fatturazione', 'mensile') %}
            {{ (energia + trasporto + oneri + accise + iva ) | round(2) }}
          {% elif is_state('input_select.fatturazione', 'bimestrale') %}
            {{ (energia + trasporto + oneri + accise + iva ) | round(2) * 2 }}
          {% elif is_state('input_select.fatturazione', 'trimestrale') %}
            {{ (energia + trasporto + oneri + accise + iva ) | round(2) * 3}}
          {% endif %}
        unit_of_measurement: '€'

      bolletta_energia:
        friendly_name_template: "Quota Energia"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set energiaConsumo = states('sensor.costo_consumo_mensile_totale') | float %}
          {% set energiaFissa = ((states('input_number.materia_energia_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set energia = energiaConsumo + energiaFissa %}

          {{ energia | round(2) }}
        unit_of_measurement: '€' 

      bolletta_trasporto:
        friendly_name_template: "Trasporto"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set trasportoConsumo = ((states('sensor.consumo_totale_mensile') | float) * (states('input_number.trasporto_quota_energia') | float)) |round (2) %}
          {% set trasportoFissa = ((states('input_number.trasporto_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set trasportoPotenza =  (((states('input_number.trasporto_quota_potenza_annua') | float) * (states('input_number.kw_contatore') | float)) / 12) | round(2) %}
          {% set trasporto = trasportoConsumo + trasportoFissa + trasportoPotenza %}
             
          {{ trasporto | round(2) }}
        unit_of_measurement: '€'  

      bolletta_oneri_di_sistema:
        friendly_name_template: "Oneri"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set oneri = ((states('sensor.consumo_totale_mensile') | float) * (states('input_number.oneri_di_sistema_quota_energia') | float)) |round (2) %}

          {{ oneri | round(2) }}
        unit_of_measurement: '€'    

      bolletta_iva:
        friendly_name_template: "IVA"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set energiaConsumo = states('sensor.costo_consumo_mensile_totale') | float %}
          {% set energiaFissa = ((states('input_number.materia_energia_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set energia = energiaConsumo + energiaFissa %}
           
          {% set trasportoConsumo = ((states('sensor.consumo_totale_mensile') | float) * (states('input_number.trasporto_quota_energia') | float)) |round (2) %}
          {% set trasportoFissa = ((states('input_number.trasporto_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set trasportoPotenza =  (((states('input_number.trasporto_quota_potenza_annua') | float) * (states('input_number.kw_contatore') | float)) / 12) | round(2) %}
          {% set trasporto = trasportoConsumo + trasportoFissa + trasportoPotenza %}
          
          {% set oneri = ((states('sensor.consumo_totale_mensile') | float) * (states('input_number.oneri_di_sistema_quota_energia') | float)) |round (2) %}

          {%set accise = ((states('sensor.consumo_totale_mensile') | float) * (states('input_number.accise') | float)) %}
          {%set iva = ((energia + trasporto + oneri + accise) * (states('input_number.iva') | float) / 100) %}

          {{ (accise + iva) | round(2) }}
        unit_of_measurement: '€'  

##------------------calcoli-mese-scorso---------------------------------##

      costo_consumo_mese_scorso_f1:
        friendly_name_template: "Costo Consumo mese scorso fascia 1"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_mensile_f1.attributes.last_period  | float) * (states.input_number.costo_f1.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      costo_consumo_mese_scorso_f2:
        friendly_name_template: "Costo Consumo mese scorso fascia 2"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_mensile_f2.attributes.last_period  | float) * (states.input_number.costo_f2.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      costo_consumo_mese_scorso_f3:
        friendly_name_template: "Costo Consumo mese scorso fascia 3"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.consumo_mensile_f3.attributes.last_period  | float) * (states.input_number.costo_f3.state| float)) | round(2) }}"
        unit_of_measurement: '€'

      consumo_totale_mese_scorso:
        friendly_name_template: "Consumo mese scorso"
        icon_template: mdi:counter
        value_template: "{{((states.sensor.consumo_mensile_f1.attributes.last_period  | float) + (states.sensor.consumo_mensile_f2.attributes.last_period  | float) + (states.sensor.consumo_mensile_f3.attributes.last_period  | float)) | round(3) }}"
        unit_of_measurement: 'KWh'

      costo_consumo_mese_scorso_totale:
        friendly_name_template: "Costo Consumo mese scorso"
        icon_template: mdi:currency-eur
        value_template: "{{((states.sensor.costo_consumo_mese_scorso_f1.state | float) + (states.sensor.costo_consumo_mensile_f2.state  | float) + (states.sensor.costo_consumo_mensile_f3.state  | float)) | round(2) }}"
        unit_of_measurement: '€'

      bolletta_tot_mese_scorso:
        friendly_name_template: "Bolletta Stimata mese scorso"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set energiaConsumo_ms = states('sensor.costo_consumo_mese_scorso_totale') | float %}
          {% set energiaFissa_ms = ((states('input_number.materia_energia_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set energia_ms = energiaConsumo_ms + energiaFissa_ms %}
          {% set trasportoConsumo_ms = ((states('sensor.consumo_totale_mensile') | float) * (states('input_number.trasporto_quota_energia') | float)) |round (2) %}
          {% set trasportoFissa_ms = ((states('input_number.trasporto_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set trasportoPotenza_ms =  (((states('input_number.trasporto_quota_potenza_annua') | float) * (states('input_number.kw_contatore') | float)) / 12) | round(2) %}
          {% set trasporto_ms = trasportoConsumo_ms + trasportoFissa_ms + trasportoPotenza_ms %}
          {% set oneri_ms = ((states('sensor.consumo_totale_mese_scorso') | float) * (states('input_number.oneri_di_sistema_quota_energia') | float)) |round (2) %}
          {% set accise_ms = ((states('sensor.consumo_totale_mese_scorso') | float) * (states('input_number.accise') | float)) %}
          {% set iva_ms = ((energia_ms + trasporto_ms + oneri_ms + accise_ms) * (states('input_number.iva') | float) / 100) %}
         
          {% if is_state('input_select.fatturazione', 'mensile') %}
            {{ (energia_ms + trasporto_ms + oneri_ms + accise_ms + iva_ms ) | round(2) }}
          {% elif is_state('input_select.fatturazione', 'bimestrale') %}
            {{ (energia_ms + trasporto_ms + oneri_ms + accise_ms + iva_ms ) | round(2) * 2 }}
          {% elif is_state('input_select.fatturazione', 'trimestrale') %}
            {{ (energia_ms + trasporto_ms + oneri_ms + accise_ms + iva_ms ) | round(2) * 3}}
          {% endif %}
        unit_of_measurement: '€'

      bolletta_energia_mese_scorso:
        friendly_name_template: "Quota Energia mese scorso"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set energiaConsumo_ms = states('sensor.costo_consumo_mese_scorso_totale') | float %}
          {% set energiaFissa_ms = ((states('input_number.materia_energia_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set energia_ms = energiaConsumo_ms + energiaFissa_ms %}
          {{ energia_ms | round(2) }}
        unit_of_measurement: '€' 

      bolletta_trasporto_mese_scorso:
        friendly_name_template: "Trasporto mese scorso"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set trasportoConsumo_ms = ((states('sensor.consumo_totale_mese_scorso') | float) * (states('input_number.trasporto_quota_energia') | float)) |round (2) %}
          {% set trasportoFissa_ms = ((states('input_number.trasporto_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set trasportoPotenza_ms =  (((states('input_number.trasporto_quota_potenza_annua') | float) * (states('input_number.kw_contatore') | float)) / 12) | round(2) %}
          {% set trasporto_ms = trasportoConsumo_ms + trasportoFissa_ms + trasportoPotenza_ms %}
          {{ trasporto_ms | round(2) }}
        unit_of_measurement: '€'  

      bolletta_oneri_di_sistema_mese_scorso:
        friendly_name_template: "Oneri mese scorso"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set oneri_ms = ((states('sensor.consumo_totale_mese_scorso') | float) * (states('input_number.oneri_di_sistema_quota_energia') | float)) |round (2) %}
          {{ oneri_ms | round(2) }}
        unit_of_measurement: '€'    

      bolletta_iva_mese_scorso:
        friendly_name_template: "IVA mese scorso"
        icon_template: mdi:currency-eur
        value_template: >- 
          {% set energiaConsumo_ms = states('sensor.costo_consumo_mese_scorso_totale') | float %}
          {% set energiaFissa_ms = ((states('input_number.materia_energia_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set energia_ms = energiaConsumo_ms + energiaFissa_ms %}
          {% set trasportoConsumo_ms = ((states('sensor.consumo_totale_mese_scorso') | float) * (states('input_number.trasporto_quota_energia') | float)) |round (2) %}
          {% set trasportoFissa_ms = ((states('input_number.trasporto_quota_fissa_annua') | float) / 12) | round(2) %}
          {% set trasportoPotenza_ms =  (((states('input_number.trasporto_quota_potenza_annua') | float) * (states('input_number.kw_contatore') | float)) / 12) | round(2) %}
          {% set trasporto_ms = trasportoConsumo_ms + trasportoFissa_ms + trasportoPotenza_ms %}
          {% set oneri_ms = ((states('sensor.consumo_totale_mese_scorso') | float) * (states('input_number.oneri_di_sistema_quota_energia') | float)) |round (2) %}
          {% set accise_ms = ((states('sensor.consumo_totale_mese_scorso') | float) * (states('input_number.accise') | float)) %}
          {% set iva_ms = ((energia_ms + trasporto_ms + oneri_ms + accise_ms) * (states('input_number.iva') | float) / 100) %}
          {{ (accise_ms + iva_ms) | round(2) }}
        unit_of_measurement: '€'  
  




##--------------------AUTOMAZIONI PER CAMBIO FASCIA---------------------##      
automation:
#####################controllo aggiornamenti############################
  - alias: controllo versione pkconsumi
    trigger:
    - platform: time
      at: '18:00'
    - event: start
      platform: homeassistant
    condition:
      - condition: template
        value_template: "{{ states('sensor.versione_pk_consumi') > (state_attr('input_number.costo_f1', 'Version')) }}"
    action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.versione_pkconsumi

  - alias: controllo versione reset pkconsumi
    trigger:
    - platform: time
      at: '18:05'
    - event: start
      platform: homeassistant
    condition:
      - condition: template
        value_template: "{{ states('sensor.versione_pk_consumi') == (state_attr('input_number.costo_f1', 'Version')) }}"
    action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.versione_pkconsumi
#####################controllo aggiornamenti############################

  - alias: Cambio Tariffa F1
    initial_state: on
    trigger:
      - platform: state
        entity_id: input_select.numero_di_fasce
        to: '1'
      - platform: template
        value_template: >-
          {{ states('sensor.time') == (states.input_datetime.f1_ora_inizio.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: input_select.numero_di_fasce
          state: '1'
        - condition: state
          entity_id: binary_sensor.giorni_feriali
          state: 'on'
    action:
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.consumo_giornaliero
        tariff: f1
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.consumo_mensile
        tariff: f1
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.consumo_annuale
        tariff: f1 

  - alias: Cambio Tariffa F2 - 2 fascie
    initial_state: on
    trigger:
      - platform: template
        value_template: >-
          {{ states('sensor.time') == (states.input_datetime.f2_ora_inizio_sera.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}
    condition:
      - condition: state
        entity_id: input_select.numero_di_fasce
        state: '2'
    action:
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.consumo_giornaliero
          tariff: f2
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.consumo_mensile
          tariff: f2
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.consumo_annuale
          tariff: f2

  - alias: Cambio Tariffa F2 - 3 fascie
    initial_state: on
    trigger:
      - platform: template
        value_template: >-
          {{ states('sensor.time') == (states.input_datetime.f2_ora_inizio_mattino.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}
      - platform: template
        value_template: >-
          {{ states('sensor.time') == (states.input_datetime.f2_ora_inizio_sera.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}
    condition:
      - condition: state
        entity_id: input_select.numero_di_fasce
        state: '3'
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.sabato
            state: 'on'
          - condition: state
            entity_id: binary_sensor.giorni_feriali
            state: 'on'
    action:
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.consumo_giornaliero
          tariff: f2
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.consumo_mensile
          tariff: f2
      - service: utility_meter.select_tariff
        data:
          entity_id: utility_meter.consumo_annuale
          tariff: f2

  - alias: Cambio Tariffa F3
    initial_state: on
    trigger:
      platform: template
      value_template: >-
        {{ states('sensor.time') == (states.input_datetime.f3_ora_inizio.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}
    condition:
      - condition: state
        entity_id: input_select.numero_di_fasce
        state: '3'
    action:
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.consumo_giornaliero
        tariff: f3
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.consumo_mensile
        tariff: f3
    - service: utility_meter.select_tariff
      data:
        entity_id: utility_meter.consumo_annuale
        tariff: f3

binary_sensor:
  - platform: workday
    country: IT
    workdays: [mon, tue, wed, thu, fri]
    name: giorni feriali
  - platform: workday
    country: IT
    workdays: [sat]
    name: sabato
input_datetime:
  f1_ora_inizio:
    name: "Orario Inizio Fascia 1"
    has_date: false
    has_time: true
    initial: '08:00'
  f2_ora_inizio_mattino:
    name: "Orario Inizio Fascia 2 - Mattino"
    has_date: false
    has_time: true
    initial: '07:00'
  f2_ora_inizio_sera:
    name: "Orario Inizio Fascia 2 - Sera"
    has_date: false
    has_time: true
    initial: '19:00'
  f3_ora_inizio:
    name: "Orario Inizio Fascia 3"
    has_date: false
    has_time: true
    initial: '23:00'
input_number: 
  # Materia Energia
  materia_energia_quota_fissa_annua:
    name: Materia Energia Quota Fissa Annua
    min: 0.00
    max: 100.00
    unit_of_measurement: '€'
    initial: !secret MateriaEnergiaQuotaFissaAnnua
    mode: box
    icon: mdi:currency-eur
  costo_f1:
    name: Costo Energia elettrica Fascia 1
    min: 0.0000001
    max: 0.5000000
    unit_of_measurement: '€'
    initial: !secret TariffaF1
    mode: box
    icon: mdi:currency-eur
  costo_f2:
    name: Costo Energia elettrica Fascia 2
    min: 0.0000001
    max: 0.5000000
    unit_of_measurement: '€'
    initial: !secret TariffaF2
    mode: box
    icon: mdi:currency-eur
  costo_f3:
    name: Costo Energia elettrica Fascia 3
    min: 0.0000001
    max: 0.5000000
    unit_of_measurement: '€'
    initial: !secret TariffaF3
    mode: box
    icon: mdi:currency-eur
  # Trasporto costi unitari
  kw_contatore:
    name: Kw Contatore
    min: 1
    max: 30
    unit_of_measurement: 'Kw'
    initial: !secret KwContatore
    mode: box
  trasporto_quota_fissa_annua:
    name: Trasporto Quota Fissa Annua
    min: 0.000
    max: 100.000
    unit_of_measurement: '€'
    initial: !secret TrasportoQuotaFissaAnnua
    mode: box
    icon: mdi:currency-eur 
  trasporto_quota_potenza_annua:
    name: Trasporto Quota Potenza Annua
    min: 0.000
    max: 100.000
    unit_of_measurement: '€'
    initial: !secret TrasportoQuotaPotenzaAnnua
    mode: box
    icon: mdi:currency-eur
  trasporto_quota_energia:
    name: Trasporto Quota Energia
    min: 0.0000001
    max: 0.5000000
    unit_of_measurement: '€'
    initial: !secret TrasportoQuotaEnergia
    mode: box
    icon: mdi:currency-eur  
  # Oneri Di Sistema costi unitari 
  oneri_di_sistema_quota_energia:
    name: Oneri Di Sistema Quota Energia
    min: 0.0000001
    max: 0.5000000
    unit_of_measurement: '€'
    initial: !secret OneriDiSistemaQuotaEnergia
    mode: box
    icon: mdi:currency-eur  
  # Accisa costi unitari 
  accise:
    name: accise
    min: 0.0000001
    max: 0.5000000
    unit_of_measurement: '€'
    initial: !secret Accise
    mode: box
    icon: mdi:currency-eur
  # IVA
  iva:
    name: IVA
    min: 0.0000001
    max: 23
    unit_of_measurement: '%'
    initial: !secret Iva
    mode: box
    icon: mdi:percent
input_select:
  numero_di_fasce:
    name: Numero di Fasce
    options:
      - 1
      - 2
      - 3
    initial: !secret NumeroTariffe
  fatturazione:
    name: fatturazione
    options:
      - mensile
      - bimestrale
      - trimestrale
    initial: !secret Fatturazione
    icon: mdi:checkbox-marked-outline
input_boolean:
  versione_pkconsumi:
script:
  scarica_pkg:
    sequence:
      - service: downloader.download_file
        data:
          url: 'https://raw.githubusercontent.com/riddik14/hassio-package-consumi/master/pkg_consumi.yaml'
          overwrite: true
      - service: homeassistant.restart
